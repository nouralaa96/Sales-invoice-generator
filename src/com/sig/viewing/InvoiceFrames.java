/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.sig.viewing;

import com.sig.example.InvoiceHead;
import com.sig.example.InvoiceHeaderTables;
import com.sig.example.InvoiceLines;
import com.sig.example.InvoiceLinesTables;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Nour Alaa
 */
public class InvoiceFrames extends javax.swing.JFrame implements ActionListener, ListSelectionListener {


    private static JButton createInvoicebutton;

    public InvoiceFrames(JButton createInvoicebutton) {
        CreateInvoicebutton = createInvoicebutton;
        initComponents();
    }

    private void initComponents() {
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")


    private void LoadMenuItemAction(java.awt.event.ActionEvent evt) {

    }

    private void CreateInvoiceBtnAction(java.awt.event.ActionEvent evt) {

    }

    private void DeleteInvoiceBtnAction(java.awt.event.ActionEvent evt) {
    }

    private void DeleteLineBtnAction(java.awt.event.ActionEvent evt) {
    }

    private void CusNameLbl(java.awt.event.ActionEvent evt) {

    }

    private void InvDateLbl(java.awt.event.ActionEvent evt) {

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InvoiceFrames(createInvoicebutton).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CreateInvoicebutton;
    private javax.swing.JButton CreateLinebutton;
    private javax.swing.JTextField CusNameLbl;
    private javax.swing.JTextField InvDateLbl;
    private javax.swing.JLabel InvNumLbl;
    private javax.swing.JLabel InvTotalLbl;
    private javax.swing.JTable InvoiceHeaderTbl;
    private javax.swing.JTable InvoiceLineTbl;
    private javax.swing.JMenu jMenu0;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane0;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jLabel0;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton DeleteInvoice;
    private javax.swing.JButton DeleteLinebutton;

    private javax.swing.JMenuItem LoadMenuIt;
    private javax.swing.JMenuItem SaveMenuIt;


    private DateFormat DF= new SimpleDateFormat("dd-MM-yyyy");
    private List<InvoiceHead> InvoiceList = new ArrayList<>();
    private InvoiceHeaderTables headerTable;
    private InvoiceLinesTables linesTable;
    private HeaderDialog dialog;
    private LineDialog datalog;
    
    @Override
    public void actionPerformed(ActionEvent e) {

        switch(e.getActionCommand())
        {
            case "Create New Invoice":
                ShowHeaderDialog();
                break;
                    
            case "Delete Invoice":
                DeleteInvoice();
                break;
            case "New Line":
                CreateNewLine();
                break;
            case "Delete Line":
                DeleteLine();
                break;
            case "Save Files":
                 SaveFile();
                 break;
             
            case"Load Files":
                 LoadFile();
                 break;
            
            case "OKCreateHeader" :
                CreateInvoiceOK();
                   break;
                   
            case "CancelCreateHeader":
                CreateInvoiceCancel();
                break;
            
            case "OKCreateLine":
                    CreateLineOK();
                    break;
                    
            case "CancelCreateLine":
                    CreateLineCancel();
                    break;
                
        }

    }




    private InvoiceHead InvoiceFinding(int invNum)
         {
             InvoiceHead inv=null;
             for(InvoiceHead in: InvoiceList)
             {
                 if(invNum==in.getNumber())
                 {
                     inv=in;
                     break;
                 }
             }
            
             
           return inv;
             
         }

    @Override
    public void valueChanged(ListSelectionEvent e) {

        System.out.println("select");
        
        SelectInvoice();

    }

    private void SelectInvoice() {
      
        
        int selected = InvoiceHeaderTbl.getSelectedRow();
        if (selected >= 0) {
            InvoiceHead row = headerTable.getInvoiceList().get(selected);
            CusNameLbl.setText(row.getCust());
            InvDateLbl.setText(DF.format(row.getInDate()));
            InvNumLbl.setText("" + row.getNumber());
            InvTotalLbl.setText("" + row.getInvoicegross());
            ArrayList<InvoiceLines> lines = row.getLines();
            System.out.println("test");
            linesTable = new InvoiceLinesTables(lines);
            InvoiceLineTbl.setModel(linesTable);
            linesTable.fireTableDataChanged();
        
    }
         
    
    
    
    
}

    private void ShowHeaderDialog() {
        
       dialog = new HeaderDialog(this);
       dialog.setVisible(true);
       
       

    }

    private void CreateInvoiceOK() {
        
       String Name= dialog.getNameField().getText();
       String dateString= dialog.getDateField().getText();
        dialog.setVisible(false);
        dialog.dispose();
        dialog =null;
        System.out.println("create 1");
        System.out.println(dateString);
        try {
            Date date=DF.parse(dateString);
            int number=InvoiceNumber();
            InvoiceHead header = new InvoiceHead(number, Name, date);
            InvoiceList.add(header);
            headerTable.fireTableDataChanged();
            System.out.println("create 2");
        } catch (ParseException ex) {}
        
        
        Invoices();
    }

    private void CreateInvoiceCancel() {
        
        dialog.setVisible(false);
        dialog.dispose();
        dialog =null;
        System.out.println("cancel");

    }


    private void LoadFile()
    {
        //headers read
        JOptionPane.showMessageDialog(this, "header file here","header File",JOptionPane.WARNING_MESSAGE);
        JFileChooser fileCh=new JFileChooser();
        int file=fileCh.showOpenDialog(this);
        if(file==JFileChooser.APPROVE_OPTION){
            //header file
            File header=fileCh.getSelectedFile();
            FileReader reader;
            try {
                //reading detailes
                reader = new FileReader(header);
                BufferedReader buffer=new BufferedReader(reader);
                String Line=null;
                while((Line=buffer.readLine())!=null)
                {
                    String [] headerSplitted=Line.split(",");
                    int invNum=Integer.parseInt(headerSplitted[0]);
                    Date invdate=DF.parse(headerSplitted[1]);
                    String invName=headerSplitted[2];

                    InvoiceHead invHeader= new InvoiceHead(invNum, invName, invdate);
                    InvoiceList.add(invHeader);

                }


                //lines read
                JOptionPane.showMessageDialog(this, "lines file here","lines File",JOptionPane.WARNING_MESSAGE);
                file= fileCh.showOpenDialog(this);
                if(file==JFileChooser.APPROVE_OPTION)
                {
                    //lines file
                    File lines=fileCh.getSelectedFile();
                    FileReader reader2;
                    //readind details
                    reader2 =new FileReader(lines);
                    BufferedReader buffer2= new BufferedReader(reader2);
                    String Lines=null;
                    while((Lines=buffer2.readLine()) != null)
                    {
                        String [] linesplitted =Lines.split(",");
                        int invNum= Integer.parseInt(linesplitted[0]); //refrence of the invoice header
                        String itemName=linesplitted[1];
                        Double itemPrice = Double.parseDouble(linesplitted[2]);
                        int itemCount = Integer.parseInt(linesplitted[3]);
                        InvoiceHead headerref=InvoiceFinding(invNum); ////refrence to the invoice header
                        InvoiceLines invLine= new InvoiceLines(itemName, itemPrice, itemCount, headerref);
                        headerref.getLines().add(invLine);

                    }

                    headerTable = new InvoiceHeaderTables(InvoiceList);
                    InvoiceHeaderTbl.setModel(headerTable);
                    InvoiceHeaderTbl.validate();

                }




            } catch (Exception ex) {ex.printStackTrace();            }


            Invoices();




        }



    }



    private int InvoiceNumber()
    {
      int max=0;
      
      for(InvoiceHead header: InvoiceList)
      {
          if(header.getNumber() > max)
              max=header.getNumber();
      } 
      
      return max+1;
    }

    private void CreateNewLine() {
    
        datalog = new LineDialog(this);
        datalog.setVisible(true);
    }

    private void CreateLineOK() {
        
        String Name= datalog.getNameF().getText();
        int count = Integer.parseInt(datalog.getCountF().getText());
        double price=Double.parseDouble(datalog.getPriceF().getText());
        
        datalog.setVisible(false);
        datalog.dispose();
        datalog = null;
        
        int currentHeader=InvoiceHeaderTbl.getSelectedRow();
        
        InvoiceHead invoice =headerTable.getInvoiceList().get(currentHeader);
        InvoiceLines line = new InvoiceLines(Name, price, count, invoice);
        
        invoice.addInvoiceLine(line);
        linesTable.fireTableDataChanged();
        headerTable.fireTableDataChanged();
        InvTotalLbl.setText("" + invoice.getInvoicegross());
        
        Invoices();
        
        

    }



    private void SaveFile()
    {

        String h = "";
        String l = "";
        for (InvoiceHead header : InvoiceList) {
            h += header.CSV();
            h += "\n";
            for (InvoiceLines line : header.getLines()) {
                l += line.CSV();
                l += "\n";
            }
        }
        JOptionPane.showMessageDialog(this, "headers file", "headers file", JOptionPane.WARNING_MESSAGE);
        JFileChooser chooser = new JFileChooser();
        int output = chooser.showSaveDialog(this);
        if (output == JFileChooser.APPROVE_OPTION) {
            File hFile = chooser.getSelectedFile();
            try {
                FileWriter hWriter = new FileWriter(hFile);
                hWriter.write(h);
                hWriter.flush();
                hWriter.close();

                JOptionPane.showMessageDialog(this, "lines file ", "lines file", JOptionPane.WARNING_MESSAGE);
                output = chooser.showSaveDialog(this);
                if (output == JFileChooser.APPROVE_OPTION) {
                    File lFile = chooser.getSelectedFile();
                    FileWriter lWriter = new FileWriter(lFile);
                    lWriter.write(l);
                    lWriter.flush();
                    lWriter.close();
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error  ", JOptionPane.ERROR_MESSAGE);
            }
        }




    }


    private void CreateLineCancel() {

          
        datalog.setVisible(false);
        datalog.dispose();
        datalog =null;


    }

    private void DeleteLine() {
    

        int index= InvoiceLineTbl.getSelectedRow();

        InvoiceLines deletedLine= linesTable.getInvoiceLines().get(index);




        linesTable.getInvoiceLines().remove(index);
        linesTable.fireTableDataChanged();
        headerTable.fireTableDataChanged();
        InvTotalLbl.setText("" + deletedLine.getHeader().getInvoicegross());

        Invoices();
        

    }


    private void Invoices() {

        for (InvoiceHead header : InvoiceList) {
            System.out.println(header);
            System.out.println(header.getLines());
        }  }

    private void DeleteInvoice() {


        int index= InvoiceHeaderTbl.getSelectedRow();
        InvoiceHead deletedheader= headerTable.getInvoiceList().get(index);

        headerTable.getInvoiceList().remove(index);
        headerTable.fireTableDataChanged();

        linesTable = new InvoiceLinesTables(new ArrayList<InvoiceLines>());
        InvoiceLineTbl.setModel(linesTable);
        linesTable.fireTableDataChanged();

        CusNameLbl.setText("");
        InvDateLbl.setText("");
        InvNumLbl.setText("");
        InvTotalLbl.setText("");

        Invoices();



    }
        
    }
